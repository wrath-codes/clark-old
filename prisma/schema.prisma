// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider             = "mysql"
  url                  = env("DATABASE_URL")
  shadowDatabaseUrl    = env("SHADOW_DATABASE_URL")
  referentialIntegrity = "prisma"
}

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["referentialIntegrity"]
}

// USER MODEL

model Users {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  email     String @unique
  password  String

  create_at DateTime @default(now())
  isAdmin   Boolean  @default(false)

  resetPasswordToken   String?
  resetPasswordExpires DateTime?

  @@unique([firstName, lastName])
  @@map("users")
}

// OPERATORS MODEL

model Operators {
  id      String  @id @default(uuid())
  name    String
  slug    String?
  cnpj    String  @unique
  website String?

  address OperatorAddresses?
  login   Logins?
  contact OperatorContacts?

  plans     Plans[]
  Contracts Contracts[]

  @@map("operators")
}

model OperatorAddresses {
  id           String  @id @default(uuid())
  street       String
  number       Int
  complement   String?
  neighborhood String
  city         String
  state        String
  country      String
  zipCode      String
  latitude     Float?
  longitude    Float?

  operator   Operators? @relation(fields: [operatorId], references: [id], onDelete: Cascade)
  operatorId String?    @unique

  @@map("operatorAddresses")
}

model Logins {
  id       String @id @default(uuid())
  username String
  password String

  operator   Operators @relation(fields: [operatorId], references: [id], onDelete: Cascade)
  operatorId String    @unique

  @@map("logins")
}

model OperatorContacts {
  id        String @id @default(uuid())
  firstName String
  lastName  String
  email     String @unique
  cellphone String

  operator   Operators? @relation(fields: [operatorId], references: [id], onDelete: Cascade)
  operatorId String?    @unique

  @@map("operatorContacts")
}

// PLANS MODEL
model Plans {
  id           String    @id @default(uuid())
  name         String
  slug         String?
  reach        PlanReach @default(GRUPO_ESTADOS)
  ans_register String    @unique

  operatorId String?
  operator   Operators?  @relation(fields: [operatorId], references: [id], onDelete: Cascade)
  PlanDeals  PlanDeals[]

  @@map("plans")
}

enum PlanReach {
  MUNICIPIO
  GRUPO_MUNICIPIOS
  ESTADO
  GRUPO_ESTADOS
  NACIONAL
}

// BROKERS MODEL
model Brokers {
  id   String  @id @default(uuid())
  name String
  slug String?
  cnpj String  @unique

  address   BrokerAddresses?
  employers Employers[]

  @@map("brokers")
}

model BrokerAddresses {
  id           String  @id @default(uuid())
  street       String
  number       Int
  complement   String?
  neighborhood String
  city         String
  state        String
  country      String
  zipCode      String
  latitude     Float?
  longitude    Float?

  broker   Brokers? @relation(fields: [brokerId], references: [id], onDelete: Cascade)
  brokerId String?  @unique

  @@map("brokerAddresses")
}

// EMPLOYERS MODEL
model Employers {
  id   String  @id @default(uuid())
  name String
  slug String?
  cnpj String  @unique

  address EmployerAddresses?

  brokerId  String?
  broker    Brokers?    @relation(fields: [brokerId], references: [id])
  Contracts Contracts[]

  @@map("employers")
}

model EmployerAddresses {
  id           String  @id @default(uuid())
  street       String
  number       Int
  complement   String?
  neighborhood String
  city         String
  state        String
  country      String
  zipCode      String
  latitude     Float?
  longitude    Float?

  employer   Employers? @relation(fields: [employerId], references: [id], onDelete: Cascade)
  employerId String?    @unique

  @@map("employerAddresses")
}

// CONTRACTS MODEL
model Contracts {
  id          String         @id @default(uuid())
  number      String         @unique
  startDate   DateTime       @default(now())
  endDate     DateTime?
  status      ContractStatus @default(ATIVO)
  description String?

  employerId String?
  employer   Employers? @relation(fields: [employerId], references: [id], onDelete: Cascade)

  operatorId String?
  operator   Operators?  @relation(fields: [operatorId], references: [id], onDelete: Cascade)
  PlanDeals  PlanDeals[]

  @@map("contracts")
}

enum ContractStatus {
  ATIVO
  CANCELADO
  EXPIRADO
}

model PlanDeals {
  id     String @id @default(uuid())
  planId String
  plan   Plans? @relation(fields: [planId], references: [id], onDelete: Cascade)

  values PlanDealValues?

  contractId String
  contract   Contracts? @relation(fields: [contractId], references: [id], onDelete: Cascade)

  @@map("planDeals")
}

model PlanDealValues {
  id String @id @default(uuid())

  age_0_18     Float
  age_19_23    Float
  age_24_28    Float
  age_29_33    Float
  age_34_38    Float
  age_39_43    Float
  age_44_48    Float
  age_49_53    Float
  age_54_58    Float
  age_59_above Float

  dealId String     @unique
  deal   PlanDeals? @relation(fields: [dealId], references: [id], onDelete: Cascade)

  @@map("planDealValues")
}

// // EMPLOYEES MODEL
// model Employees {
//   firstName     String
//   lastName      String
//   cpf           String        @unique
//   email         String        @unique
//   cellphone     String        @unique
//   dateBirth     DateTime
//   sex           Sex           @default(MASCULINO)
//   maritalStatus MaritalStatus @default(SOLTEIRO)

//   address             EmployeeAddresses? @relation(fields: [employeeAddressesId], references: [id])
//   employeeAddressesId String?

//   employerId String?
//   employer   Employers? @relation(fields: [employerId], references: [id], onDelete: Cascade)

//   planCard   PlanCards? @relation(fields: [planCardId], references: [id])
//   planCardId String?

//   dealId String?
//   deal   PlanDeals? @relation(fields: [dealId], references: [id], onDelete: Cascade)

//   titularId String?
//   titular   Titulars? @relation(fields: [titularId], references: [id])

//   @@map("employees")
// }

// model EmployeeAddresses {
//   id           String  @id @default(uuid())
//   street       String
//   number       Int
//   complement   String?
//   neighborhood String
//   city         String
//   state        String
//   country      String
//   zipCode      String
//   latitude     Float?
//   longitude    Float?

//   employees Employees[]

//   @@map("employeeAddresses")
// }

// enum Sex {
//   MASCULINO
//   FEMININO
// }

// enum MaritalStatus {
//   SOLTEIRO
//   CASADO
//   DIVORCIADO
//   VIUVO
// }

// // PLANCARD MODEL
// model PlanCards {
//   id     String @id @default(uuid())
//   number String @unique

//   isActive        Boolean @default(true)
//   isCoPay         Boolean @default(false)
//   coPayPercentage Float   @default(10)

//   kind      PlanCardKind @default(TITULAR)
//   Employees Employees[]

//   @@map("planCards")
// }

// enum PlanCardKind {
//   TITULAR
//   CONJUGUE
//   FILHO_FILHA
//   MAE_PAI
// }

// model Titulars {
//   id String @id @default(uuid())

//   cpf String @unique

//   family Employees[]

//   @@map("titulars")
// }
